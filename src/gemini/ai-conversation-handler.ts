import { GoogleGenAI } from "@google/genai";
import {Question} from "../interfaces/question"

const KEYNAME = "MYKEY";

/**
 * @function getAPIKey Gets the API key from localStorage.
 * @returns {string} The API key, the empty string if not found
 */
function getAPIKey(): string {
    return JSON.parse(localStorage.getItem(KEYNAME) ?? '""');
}

/**
 * @function getGoogleGenAI Gets the object for interfacing with Gemini.
 * @returns {GoogleGenAI} The object for interfacing with Gemini
 */
function getGoogleGenAI(): GoogleGenAI {
    return new GoogleGenAI({ apiKey: getAPIKey() });
}

/**
 * @function askQuestion Gets an answer from Gemini given a user-asked question.
 * @param {string} apiKey The api key used for the request 
 * @param {string}question The question asked by the user
 * @returns {string} The answer Gemini generated based on the given question
 */
export async function askQuestion(question: string){
    const ai = getGoogleGenAI();
    const response = await ai.models.generateContent({
        model: "gemini-2.0-flash",
        contents: question
    });
    return response.text;
}

export async function generateResults(data: string){
    const ai = getGoogleGenAI();
    const response = await ai.models.generateContent({
        model:"gemini-2.0-flash",
        contents: "Could you recommend me a career based on the following questions and answers?"
    })
    return response.text;
}

/**
 * @function generateQuestions takes a career field and returns a list of 7 Question objects based on that field.
 * @param {string} apiKey the api key for the Gemini request
 * @param {string} careerField the career field to base the questions off of.
 * @returns {Question<T>[]} an array of Question objects.
 *
 */
export async function generateQuestions(careerField: string){
    const ai = getGoogleGenAI();
    const prompt = `Could you generate 7 questions that would help me find a career in ` + careerField + 
    ` using this object format for Likert scale questions:
        Question = {'question':string, 'type':"scaled", answer:undefined, scale:[string, string]}
    and this JSON scheme for text answered questions:
        Question = {'question':string, 'type':"text", answer:undefined, scale:[] }
        Return: Array<Question>
    `;
    const response = await ai.models.generateContent({
        model:"gemini-2.0-flash",
        contents: prompt
    });
    console.log(response.text);
    let questions = parseQuestions(response.text);
    return questions;
}

/**
 * @function parseQuestions takes a stringified array of json objects generated by Gemini and turns them into Questions
 * @param {string | undefined} questionsString a string of format: ```json[{...},{...}]```, or an undefined value
 * @returns {BasicQuestion[]} an array of Questions.
 */
function parseQuestions(questionsString: string | undefined){
    //string format: ```json[{...},{...}]```
    let questions:Question[] = [];
    if (questionsString !== undefined){
        try{
            let object:Question[] = JSON.parse(questionsString.substring(8,questionsString.length-4), (key, value)=>{
                return value;
            });
            console.log(object);
            questions = object;
        } catch (error){
                    console.log("Could not parse JSON ", error);
        }
    }
    return questions;
}
